pipeline {
    agent any

    tools {
        nodejs 'NodeJS 16.13.2'
    }

    environment {
        // Docker Hub Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ (Jenkins Credential ID)
        IMAGE_NAME        = 'hanol98/runners-hi-frontend'
        K8S_MANIFEST_DIR  = 'deploy/k8s'
        GIT_CONFIG_USERNAME = 'hanol98'
        GIT_CONFIG_EMAIL = 'hanol98@naver.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "üì¶ Installing dependencies"
                    npm install
                '''
            }
        }

        stage('Build React') {
            steps {
                sh '''
                    echo "üî® Building React App"
                    CI=false GENERATE_SOURCEMAP=false npm run build
                '''
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    // 1) Docker ÎπåÎìú
                    sh """
                        echo "üê≥ Building Docker image"
                        docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                    """
                    // 2) Docker Hub Î°úÍ∑∏Ïù∏ & Ìë∏Ïãú
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'Docker-Hub-Access-Token',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )
                    ]) {
                        sh """
                            echo "üîë Docker login"
                            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                            echo "üöÄ Pushing image"
                            docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('GitOps: Update K8s Manifest') {
            steps {
                script {
                    // Git ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï
                    sh """
                        git config user.name "${GIT_CONFIG_USERNAME}"
                        git config user.email "${GIT_CONFIG_EMAIL}"
                    """
                    // deployment YAMLÏùò image ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
                    sh """
                        echo "‚úèÔ∏è Bumping K8s manifest image tag"
                        sed -i \\
                        -e "s|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${BUILD_NUMBER}|g" \\
                        ${K8S_MANIFEST_DIR}/deployment-frontend.yaml
                    """
                    // Ïª§Î∞ã & Ìë∏Ïãú
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'Git-Hub-Access-Token',
                            usernameVariable: 'GIT_USER',
                            passwordVariable: 'GIT_PASS')
                    ]) {
                        sh """
                            git add ${K8S_MANIFEST_DIR}/deployment-frontend.yaml
                            git commit -m "ci: bump frontend image to ${BUILD_NUMBER}"
                            git push https://github.com/RocketDDan/frontend.git HEAD:main
                        """
                    }
                }
            }
        }

        // (ÏÑ†ÌÉù) Î∞îÎ°ú Argo CD sync Î•º Ìä∏Î¶¨Í±∞ ÌïòÍ≥† Ïã∂Îã§Î©¥ ÏïÑÎûò Ïä§ÌÖåÏù¥ÏßÄ Ï∂îÍ∞Ä
        stage('ArgoCD Sync (optional)') {
            steps {
                withCredentials([
                    string(credentialsId: 'argocd-token', variable: 'ARGO_TOKEN'),
                    string(credentialsId: 'argocd-server', variable: 'ARGO_SERVER')
                ]) {
                    sh """
                        echo "üîÑ Logging into Argo CD"
                        argocd login ${ARGO_SERVER} --grpc-web --auth-token ${ARGO_TOKEN} --insecure
                        echo "üõ∞Ô∏è Sync application"
                        argocd app sync runners-hi-frontend
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning workspace'
            sh '''
                rm -rf build
            '''
        }
    }
}
